# Generated by Django 4.1.7 on 2023-05-16 13:58

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('proteins', models.FloatField()),
                ('fats', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('calories', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, default='', max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, default='recipe_avatars/no-photo.png', null=True, upload_to='recipe_avatars/')),
                ('likes', models.IntegerField(default=0)),
                ('amounts', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('total_proteins', models.FloatField()),
                ('total_fats', models.FloatField()),
                ('total_carbohydrates', models.FloatField()),
                ('total_calories', models.IntegerField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('liked', models.ManyToManyField(related_name='liked_users', to=settings.AUTH_USER_MODEL)),
                ('products', models.ManyToManyField(to='app.product')),
                ('steps', models.ManyToManyField(to='app.step')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grams', models.IntegerField()),
                ('proteins', models.FloatField()),
                ('fats', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('calories', models.IntegerField()),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.product')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_proteins', models.FloatField()),
                ('total_fats', models.FloatField()),
                ('total_carbohydrates', models.FloatField()),
                ('total_calories', models.IntegerField()),
                ('water', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('breakfast', models.ManyToManyField(related_name='breakfast_set', to='app.meal')),
                ('dinner', models.ManyToManyField(related_name='dinner_set', to='app.meal')),
                ('lunch', models.ManyToManyField(related_name='lunch_set', to='app.meal')),
                ('snack', models.ManyToManyField(related_name='snack_set', to='app.meal')),
            ],
        ),
    ]
